[
["methods.html", "5 Model methods 5.1 Display 5.2 Accessibility 5.3 Components 5.4 Interpolation 5.5 Re-estimation 5.6 Simulation 5.7 Visualisation", " 5 Model methods 5.1 Display print(), summary() 5.2 Accessibility augment(), tidy(), glance() 5.3 Components components() 5.4 Interpolation interpolate() 5.5 Re-estimation https://github.com/tidyverts/fable/issues/43 5.5.1 refit() https://github.com/tidyverts/fable/issues/43 5.5.2 stream() 5.6 Simulation Much like the tidymodels opinion toward predict, simulate should not default to an archived version of the training set. This allows models to be used for simulating new data sets, which is especially relevant for time series as often future paths beyond the training set are simulated. The simulate method for a fable model should accept these arguments (names chosen for consistency with tidymodels): object: The model itself new_data: The data used for simulation times: The number of simulated series (handled by fablelite) seed: Random generator initialisation (handled by fablelite) The new_data dataset extends existing stats::simulate functionality by allowing the simulation to accept a new time index for simulating beyond the sample (.idx), and allows the simulation to work with a new set of exogenous regressors (say x1 and x2). It is expected that the innovations (.innov) for the simulation are randomly generated for each repition number (rep), which can be achieved using the times argument. However, users should also be able to provide a set of pre-generated innovations (.innov) for each repition (.rep). If these columns are provided in the new_data, then this data will be passed directly to the simulation method (without generating new numbers over times replications). ## # A tsibble: 9 x 5 [1M] ## # Key: .rep [3] ## .rep .idx .innov x1 x2 ## &lt;int&gt; &lt;mth&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 2017 Jan 0.00290 -0.0692 -1.24 ## 2 1 2017 Feb 0.0651 0.551 -1.61 ## 3 1 2017 Mar -0.295 1.57 -1.57 ## 4 2 2017 Jan 0.0520 4.19 -2.74 ## 5 2 2017 Feb 0.122 7.87 -0.840 ## 6 2 2017 Mar 0.537 2.49 -1.23 ## 7 3 2017 Jan -0.365 3.53 -1.41 ## 8 3 2017 Feb -0.650 2.46 -2.99 ## 9 3 2017 Mar -1.55 2.42 -2.47 For the end user, creating simulations would work like this: library(fable) library(tsibbledata) UKLungDeaths %&gt;% LM(mdeaths ~ fourier(&quot;year&quot;, K = 4) + fdeaths) %&gt;% simulate(UKLungDeaths, times = 5) ## # A tsibble: 360 x 3 [1M] ## # Key: .rep [5] ## index .rep .sim ## &lt;mth&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1974 Jan 1 2351. ## 2 1974 Feb 1 1912. ## 3 1974 Mar 1 2031. ## 4 1974 Apr 1 1857. ## 5 1974 May 1 1476. ## 6 1974 Jun 1 1108. ## 7 1974 Jul 1 1248. ## 8 1974 Aug 1 1058. ## 9 1974 Sep 1 828. ## 10 1974 Oct 1 1470. ## # ... with 350 more rows Or, if they wanted to simulate beyond the sample: library(lubridate) UKLungDeaths %&gt;% filter(year(index) &lt;= 1978) %&gt;% LM(mdeaths ~ fourier(&quot;year&quot;, K = 4) + fdeaths) %&gt;% simulate( UKLungDeaths %&gt;% filter(year(index) &gt; 1978), times = 5 ) ## # A tsibble: 60 x 3 [1M] ## # Key: .rep [5] ## index .rep .sim ## &lt;mth&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1979 Jan 1 2127. ## 2 1979 Feb 1 2000. ## 3 1979 Mar 1 1925. ## 4 1979 Apr 1 1720. ## 5 1979 May 1 1404. ## 6 1979 Jun 1 1245. ## 7 1979 Jul 1 1215. ## 8 1979 Aug 1 1143. ## 9 1979 Sep 1 1135. ## 10 1979 Oct 1 987. ## # ... with 50 more rows 5.7 Visualisation "]
]
